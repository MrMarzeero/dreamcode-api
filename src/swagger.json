{
  "openapi": "3.0.0",
  "info": {
    "title": "DreamCode API",
    "description": "API for generating and solving competitive programming problems.",
    "version": "0.5.0"
  },
  "paths": {
    "/problem": {
      "post": {
        "summary": "Generate a competitive programming problem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string",
                    "example": "Portuguese"
                  },
                  "context": {
                    "type": "string",
                    "example": "Changellenge with presidents"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Binary Search"
                    }
                  },
                  "level": {
                    "type": "string",
                    "example": "Easy"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Problem created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 201
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "Created!"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "O Desafio do Presidente"
                            },
                            "statement": {
                              "type": "string",
                              "example": "Em uma eleição, o país possui N presidentes potenciais..."
                            },
                            "input": {
                              "type": "string",
                              "example": "A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 1000)..."
                            },
                            "output": {
                              "type": "string",
                              "example": "Um inteiro representando o número de presidentes..."
                            },
                            "sample_input": {
                              "type": "string",
                              "example": "5\\n10 20 10 30 20"
                            },
                            "sample_output": {
                              "type": "string",
                              "example": "3"
                            },
                            "notes": {
                              "type": "string",
                              "example": "Os presidentes que podem ser escolhidos são..."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        "error": {
                          "type": "string",
                          "example": "Invalid input data."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/solution": {
      "post": {
        "summary": "Generate a solution for a competitive programming problem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string",
                    "example": "cpp"
                  },
                  "problem": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "A Busca do Presidente"
                      },
                      "statement": {
                        "type": "string",
                        "example": "Em um país, existem N candidatos a presidente..."
                      },
                      "input": {
                        "type": "string",
                        "example": "A primeira linha contém um inteiro N (2 ≤ N ≤ 1000)..."
                      },
                      "output": {
                        "type": "string",
                        "example": "Retorne um único inteiro, que é a maior soma..."
                      },
                      "sample_input": {
                        "type": "string",
                        "example": "5\\n10 20 30 40 50"
                      },
                      "sample_output": {
                        "type": "string",
                        "example": "90"
                      },
                      "notes": {
                        "type": "string",
                        "example": "Para encontrar a combinação ideal..."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Solution created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 201
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "Created!"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "solution": {
                              "type": "string",
                              "example": "#include <iostream>..."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        "error": {
                          "type": "string",
                          "example": "Invalid input data."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/test-cases": {
      "post": {
        "summary": "Generate competitive programming test cases",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "test_cases": {
                    "type": "integer",
                    "example": 6
                  },
                  "problem": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "A Busca do Presidente"
                      },
                      "statement": {
                        "type": "string",
                        "example": "Em um país, existem N candidatos a presidente..."
                      },
                      "input": {
                        "type": "string",
                        "example": "A primeira linha contém um inteiro N (2 ≤ N ≤ 1000)..."
                      },
                      "output": {
                        "type": "string",
                        "example": "Retorne um único inteiro, que é a maior soma..."
                      },
                      "sample_input": {
                        "type": "string",
                        "example": "5\\n10 20 30 40 50"
                      },
                      "sample_output": {
                        "type": "string",
                        "example": "90"
                      },
                      "notes": {
                        "type": "string",
                        "example": "Para encontrar a combinação ideal..."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Test cases created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 201
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "Created!"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "test_cases": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "input": {
                                    "type": "string",
                                    "example": "5\\n5 15 25 35 45"
                                  },
                                  "output": {
                                    "type": "string",
                                    "example": "60"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 400
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        "error": {
                          "type": "string",
                          "example": "Invalid input data."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 500
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "error": {
                          "type": "string",
                          "example": "An unexpected error occurred."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
